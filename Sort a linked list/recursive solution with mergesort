class Solution {
    public ListNode sortList(ListNode head) {
        if(head==null || head.next==null)
            return head;
        ListNode lefthead=head;
        ListNode middle=middle(head);
        ListNode righthead=middle.next;
        middle.next=null;
        lefthead=sortList(lefthead);
        righthead=sortList(righthead);

        return merge(lefthead,righthead);
    }
    public ListNode middle(ListNode head)
    {
        ListNode slow=head;
        ListNode fast=head.next.next;
        while(fast!=null && fast.next!=null)
        {
            slow=slow.next;
            fast=fast.next.next;
        }
        return slow;
    }

    public ListNode merge(ListNode l1,ListNode l2)
    {
        ListNode dummy=new ListNode(-1);
        ListNode curr=dummy;
        while(l1!=null && l2!=null)
        {
            if(l1.val<=l2.val)
            {
                curr.next=l1;
                curr=curr.next;
                l1=l1.next;
            }
            else
            {
                curr.next=l2;
                curr=curr.next;
                l2=l2.next;
            }
        }
        if(l1!=null)
            curr.next=l1;
        else
            curr.next=l2;

        return dummy.next;
    }
}
